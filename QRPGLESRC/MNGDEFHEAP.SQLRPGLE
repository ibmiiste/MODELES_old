000100180502      //-----------------------------------------------------------------*
000200180502      // Prototypes for subprocedures in this module                     *
000300180502      //-----------------------------------------------------------------*
000400180502      //-----------------------------------------------------------------*
000500180502      // Each element in the list contains a pointer to the              *
000600180502      // name and a pointer to the next element                          *
000700180502      //-----------------------------------------------------------------*
000800180502       dcl-ds elem based(elem$);
000900180502        name$ pointer;
001000180502        next$ pointer;
001100180502        name_len uns(5);
001200180502       end-ds;
001300180502       dcl-s nameVal char(40) based(name$);
001400180502       dcl-c elemSize %size(elem);
001500180502      //-----------------------------------------------------------------*
001600180502      // The first element in the list is in static storage.             *
001700180502      // The name field of this element is not set to a value.           *
001800180502      //-----------------------------------------------------------------*
001900180502       dcl-ds first;
002000180502        *n pointer inz(*null);
002100180502        *n pointer inz(*null);
002200180502        *n uns(5) inz(0);
002300180502       end-ds;
002400180502      //-----------------------------------------------------------------*
002500180502      // This is the pointer to the current element.                     *
002600180502      // When elem$ is set to the address of <first>, the list is        *
002700180502      // empty.                                                          *
002800180502      //-----------------------------------------------------------------*
002900180502       dcl-s elem$ pointer inz(%addr(first));
003000180502      //-----------------------------------------------------------------*
003100180502      // Put 5 elements in the list                                      *
003200180502      //-----------------------------------------------------------------*
003300180502     C                   DO        5
003400180502     C     'Name?'       DSPLY                   name             40
003500180502      /FREE
003600180502         AddName(name);
003700180502       ENDDO;
003800180502
003900180502       //-----------------------------------------------------------------*
004000180502       // Display the list and then free it.                              *
004100180502       //-----------------------------------------------------------------*
004200180502       Display();
004300180502       Free();
004400180502       *INLR = '1';
004500180502       //-----------------------------------------------------------------*
004600180502       // S U B P R O C E D U R E S                                       *
004700180502       //-----------------------------------------------------------------*
004800180502       //-----------------------------------------------------------------*
004900180502       // AddName - add a name to the end of the list                     *
005000180502       //-----------------------------------------------------------------*
005100180502      /END-FREE
005200180502       dcl-proc AddName;
005300180502       dcl-pi AddName;
005400180502        name char(40);
005500180502       end-pi;
005600180502      //-----------------------------------------------------------------*
005700180502      // Allocate a new element for the array, pointed at by the         *
005800180502      // 'next' pointer of the current end of the list.                  *
005900180502      //                                                                 *
006000180502      // Before:                                                         *
006100180502      //                                                                 *
006200180502      //  .-------------.                                                *
006300180502      //  |             |                                                *
006400180502      //  | name     *--->abc                                            *
006500180502      //  | name_len 3  |                                                *
006600180502      //  | next     *-------|||                                         *
006700180502      //  |             |                                                *
006800180502      //  '-------------'                                                *
006900180502      //                                                                 *
007000180502      //-----------------------------------------------------------------*
007100180502     C                   ALLOC     elemSize      next$
007200180502      //-----------------------------------------------------------------*
007300180502      //                                                                 *
007400180502      // After: Note that the old element is still the current one       *
007500180502      //        because elem$ is still pointing to the old element       *
007600180502      //                                                                 *
007700180502      //  .-------------.               .--------------.                 *
007800180502      //  |             |       .------>|              |                 *
007900180502      //  | name     *--->abc   |       |              |                 *
008000180502      //  | name_len 3  |       |       |              |                 *
008100180502      //  | next     *----------'       |              |                 *
008200180502      //  |             |               |              |                 *
008300180502      //  '-------------'               '--------------'                 *
008400180502      //                                                                 *
008500180502      // Now set elem$ to point to the new element                       *
008600180502      //-----------------------------------------------------------------*
008700180502      /FREE
008800180502       elem$ = next$;
008900180502       //-----------------------------------------------------------------*
009000180502       //                                                                 *
009100180502       // After: Now the names name$, name_len and next$ refer            *
009200180502       //        to storage in the new element                            *
009300180502       //                                                                 *
009400180502       //  .-------------.               .--------------.                 *
009500180502       //  |             |       .------>|              |                 *
009600180502       //  |          *--->abc   |       | name      *  |                 *
009700180502       //  |          3  |       |       | name_len     |                 *
009800180502       //  |          *----------'       | next      *  |                 *
009900180502       //  |             |               |              |                 *
010000180502       //  '-------------'               '--------------'                 *
010100180502       //                                                                 *
010200180502       // Now set the values of the new element.                          *
010300180502       // The next pointer is set to *NULL to indicate that it is the     *
010400180502       // end of the list.                                                *
010500180502       //-----------------------------------------------------------------*
010600180502       next$ = *NULL;
010700180502       //-----------------------------------------------------------------*
010800180502       // Save the length of the name (not counting trailing blanks)
010900180502       //-----------------------------------------------------------------*
011000180502       name_len = %len(%trimr(name));
011100180502       //-----------------------------------------------------------------*
011200180502       // Storage is allocated for the name and then set to the value of
011300180502       // the name.
011400180502       //-----------------------------------------------------------------*
011500180502      /END-FREE
011600180502     C                   ALLOC     name_len      name$
011700180502      /FREE
011800180502       %SUBST(nameVal:1:name_len) = name;
011900180502       //-----------------------------------------------------------------*
012000180502       //                                                                 *
012100180502       // After:                                                          *
012200180502       //                                                                 *
012300180502       //  .-------------.               .--------------.                 *
012400180502       //  |             |       .------>|              |                 *
012500180502       //  |          *--->abc   |       | name      *--->newname         *
012600180502       //  |          3  |       |       | name_len  nn |                 *
012700180502       //  |          *----------'       | next      *--->|||             *
012800180502       //  |             |               |              |                 *
012900180502       //  '-------------'               '--------------'                 *
013000180502       //-----------------------------------------------------------------*
013100180502      /END-FREE
013200180502       end-proc;
013300180502      //-----------------------------------------------------------------*
013400180502      // Display - display the list                                      *
013500180502      //-----------------------------------------------------------------*
013600180502       dcl-proc Display;
013700180502       dcl-s saveElem$ pointer;
013800180502       dcl-s dspName char(40);
013900180502      //-----------------------------------------------------------------*
014000180502      // Save the current elem pointer so the list can be restored after *
014100180502      // being displayed and set the list pointer to the beginning of    *
014200180502      // the list.                                                       *
014300180502      //-----------------------------------------------------------------*
014400180502      /FREE
014500180502       saveElem$ = elem$;
014600180502       elem$ = %ADDR(first);
014700180502       //-----------------------------------------------------------------*
014800180502       // Loop through the elements of the list until the next pointer is *
014900180502       // *NULL                                                           *
015000180502       //-----------------------------------------------------------------*
015100180502       DOW next$ <> *NULL;
015200180502         elem$ = next$;
015300180502         dspName = %SUBST(nameVal:1:name_len);
015400180502         dsply 'Name: ' ' ' dspName;
015500180502       ENDDO;
015600180502       //-----------------------------------------------------------------*
015700180502       // Restore the list pointer to its former place
015800180502       //-----------------------------------------------------------------*
015900180502       elem$ = saveElem$;
016000180502      /END-FREE
016100180502       end-proc;
016200180502      //-----------------------------------------------------------------*
016300180502      // Free - release the storage used by the list                     *
016400180502      //-----------------------------------------------------------------*
016500180502       dcl-proc Free;
016600180502       dcl-s prv$ pointer;
016700180502      //-----------------------------------------------------------------*
016800180502      // Loop through the elements of the list until the next pointer is *
016900180502      // *NULL, starting from the first real element in the list         *
017000180502      //-----------------------------------------------------------------*
017100180502      /FREE
017200180502       elem$ = %ADDR(first);
017300180502       elem$ = next$;
017400180502       DOW elem$ <> *NULL;
017500180502         //-----------------------------------------------------------------*
017600180502         // Free the storage for name                                       *
017700180502         //-----------------------------------------------------------------*
017800180502         DEALLOC name$;
017900180502         //-----------------------------------------------------------------*
018000180502         // Save the pointer to current elem$
018100180502         //-----------------------------------------------------------------*
018200180502         prv$ = elem$;
018300180502         //-----------------------------------------------------------------*
018400180502         // Advance elem$ to the next element
018500180502         //-----------------------------------------------------------------*
018600180502         elem$ = next$;
018700180502
018800180502         //-----------------------------------------------------------------*
018900180502         // Free the storage for the current element
019000180502         //-----------------------------------------------------------------*
019100180502         DEALLOC prv$;
019200180502       ENDDO;
019300180502
019400180502       //-----------------------------------------------------------------*
019500180502       // Ready for a new list:
019600180502       //-----------------------------------------------------------------*
019700180502       elem$ = %ADDR(first);
019800180502      /END-FREE
019900180502       end-proc;
